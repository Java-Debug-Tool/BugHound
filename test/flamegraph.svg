<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:black; }
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "Function: " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	})

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.style["opacity"] = "0.0";
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			if (e.attributes["class"].value != "func_g")
				continue;
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (rect == null) {
				// the rect might be wrapped in an anchor
				// if nameattr href is being used
				if (rect = find_child(e, "a")) {
				    rect = find_child(r, "rect");
				}
			}
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes["width"].value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes["x"].value);
				orig_save(rect, "fill");
				rect.attributes["fill"].value =
				    "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.style["opacity"] = "1.0";
		searchbtn.firstChild.nodeValue = "Reset Search"

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.style["opacity"] = "1.0";
		pct = 100 * count / maxwidth;
		if (pct == 100)
			pct = "100"
		else
			pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
	function searchover(e) {
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text x="600" y="24" text-anchor="middle" style="font-size:17px">Flame Graph</text>
<text x="10" y="325" id="details"> </text>
<text x="10" y="24" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer">Reset Zoom</text>
<text x="1090" y="24" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer">Search</text>
<text x="1090" y="325" id="matched"> </text>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>all (8 samples, 100.00%)</title><rect x="10.0" y="291.0" width="1180.0" height="15" fill="#ed6868" rx="2" ry="2"/>
<text x="13.0" y="302.0">all</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Thread.run (7 samples, 87.50%)</title><rect x="10.0" y="275.0" width="1032.5" height="15" fill="#49dd49" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/lang/Thread.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ReturnTest$1.run (7 samples, 87.50%)</title><rect x="10.0" y="259.0" width="1032.5" height="15" fill="#49dd49" rx="2" ry="2"/>
<text x="13.0" y="270.0">ReturnTest$1.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ReturnTest.getIntVal (2 samples, 25.00%)</title><rect x="10.0" y="243.0" width="295.0" height="15" fill="#4fe34f" rx="2" ry="2"/>
<text x="13.0" y="254.0">ReturnTest.getIntVal</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ReturnTest.getSubIntVal (1 samples, 12.50%)</title><rect x="10.0" y="227.0" width="147.5" height="15" fill="#3ad03a" rx="2" ry="2"/>
<text x="13.0" y="238.0">ReturnTest.getSubIn..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/RuntimeException.&lt;init&gt; (1 samples, 12.50%)</title><rect x="10.0" y="211.0" width="147.5" height="15" fill="#55e855" rx="2" ry="2"/>
<text x="13.0" y="222.0">java/lang/RuntimeEx..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Exception.&lt;init&gt; (1 samples, 12.50%)</title><rect x="10.0" y="195.0" width="147.5" height="15" fill="#64f664" rx="2" ry="2"/>
<text x="13.0" y="206.0">java/lang/Exception..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 12.50%)</title><rect x="10.0" y="179.0" width="147.5" height="15" fill="#55e855" rx="2" ry="2"/>
<text x="13.0" y="190.0">java/lang/Throwable..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Throwable.fillInStackTrace (1 samples, 12.50%)</title><rect x="10.0" y="163.0" width="147.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="174.0">java/lang/Throwable..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Throwable.fillInStackTrace (1 samples, 12.50%)</title><rect x="10.0" y="147.0" width="147.5" height="15" fill="#53e653" rx="2" ry="2"/>
<text x="13.0" y="158.0">java/lang/Throwable..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Java_java_lang_Throwable_fillInStackTrace (1 samples, 12.50%)</title><rect x="10.0" y="131.0" width="147.5" height="15" fill="#d03d3d" rx="2" ry="2"/>
<text x="13.0" y="142.0">Java_java_lang_Thro..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>JVM_FillInStackTrace (1 samples, 12.50%)</title><rect x="10.0" y="115.0" width="147.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="13.0" y="126.0">JVM_FillInStackTrace</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (1 samples, 12.50%)</title><rect x="10.0" y="99.0" width="147.5" height="15" fill="#c5c53a" rx="2" ry="2"/>
<text x="13.0" y="110.0">java_lang_Throwable..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (1 samples, 12.50%)</title><rect x="10.0" y="83.0" width="147.5" height="15" fill="#b6b634" rx="2" ry="2"/>
<text x="13.0" y="94.0">java_lang_Throwable..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (1 samples, 12.50%)</title><rect x="10.0" y="67.0" width="147.5" height="15" fill="#cece3d" rx="2" ry="2"/>
<text x="13.0" y="78.0">BacktraceBuilder::B..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>BacktraceBuilder::expand(Thread*) (1 samples, 12.50%)</title><rect x="10.0" y="51.0" width="147.5" height="15" fill="#bcbc37" rx="2" ry="2"/>
<text x="13.0" y="62.0">BacktraceBuilder::e..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>arrayOopDesc::max_array_length(BasicType) (1 samples, 12.50%)</title><rect x="10.0" y="35.0" width="147.5" height="15" fill="#c9c93b" rx="2" ry="2"/>
<text x="13.0" y="46.0">arrayOopDesc::max_a..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/IllegalArgumentException.&lt;init&gt; (1 samples, 12.50%)</title><rect x="157.5" y="227.0" width="147.5" height="15" fill="#4de14d" rx="2" ry="2"/>
<text x="160.5" y="238.0">java/lang/IllegalAr..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/RuntimeException.&lt;init&gt; (1 samples, 12.50%)</title><rect x="157.5" y="211.0" width="147.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.5" y="222.0">java/lang/RuntimeEx..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Exception.&lt;init&gt; (1 samples, 12.50%)</title><rect x="157.5" y="195.0" width="147.5" height="15" fill="#39ce39" rx="2" ry="2"/>
<text x="160.5" y="206.0">java/lang/Exception..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 12.50%)</title><rect x="157.5" y="179.0" width="147.5" height="15" fill="#3dd23d" rx="2" ry="2"/>
<text x="160.5" y="190.0">java/lang/Throwable..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Throwable.fillInStackTrace (1 samples, 12.50%)</title><rect x="157.5" y="163.0" width="147.5" height="15" fill="#45d945" rx="2" ry="2"/>
<text x="160.5" y="174.0">java/lang/Throwable..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Throwable.fillInStackTrace (1 samples, 12.50%)</title><rect x="157.5" y="147.0" width="147.5" height="15" fill="#57ea57" rx="2" ry="2"/>
<text x="160.5" y="158.0">java/lang/Throwable..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Java_java_lang_Throwable_fillInStackTrace (1 samples, 12.50%)</title><rect x="157.5" y="131.0" width="147.5" height="15" fill="#ce3c3c" rx="2" ry="2"/>
<text x="160.5" y="142.0">Java_java_lang_Thro..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>JVM_FillInStackTrace (1 samples, 12.50%)</title><rect x="157.5" y="115.0" width="147.5" height="15" fill="#eb6666" rx="2" ry="2"/>
<text x="160.5" y="126.0">JVM_FillInStackTrace</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (1 samples, 12.50%)</title><rect x="157.5" y="99.0" width="147.5" height="15" fill="#d1d13e" rx="2" ry="2"/>
<text x="160.5" y="110.0">java_lang_Throwable..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (1 samples, 12.50%)</title><rect x="157.5" y="83.0" width="147.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="160.5" y="94.0">java_lang_Throwable..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>JavaThread::pd_last_frame() (1 samples, 12.50%)</title><rect x="157.5" y="67.0" width="147.5" height="15" fill="#bcbc36" rx="2" ry="2"/>
<text x="160.5" y="78.0">JavaThread::pd_last..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>CodeCache::find_blob(void*) (1 samples, 12.50%)</title><rect x="157.5" y="51.0" width="147.5" height="15" fill="#c9c93b" rx="2" ry="2"/>
<text x="160.5" y="62.0">CodeCache::find_blo..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/io/PrintStream.println (3 samples, 37.50%)</title><rect x="305.0" y="243.0" width="442.5" height="15" fill="#49dd49" rx="2" ry="2"/>
<text x="308.0" y="254.0">java/io/PrintStream.println</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/io/PrintStream.print (3 samples, 37.50%)</title><rect x="305.0" y="227.0" width="442.5" height="15" fill="#3ed33e" rx="2" ry="2"/>
<text x="308.0" y="238.0">java/io/PrintStream.print</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/io/PrintStream.write (3 samples, 37.50%)</title><rect x="305.0" y="211.0" width="442.5" height="15" fill="#33c933" rx="2" ry="2"/>
<text x="308.0" y="222.0">java/io/PrintStream.write</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/io/Writer.write (1 samples, 12.50%)</title><rect x="600.0" y="195.0" width="147.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="603.0" y="206.0">java/io/Writer.write</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/io/BufferedWriter.write (1 samples, 12.50%)</title><rect x="600.0" y="179.0" width="147.5" height="15" fill="#4bdf4b" rx="2" ry="2"/>
<text x="603.0" y="190.0">java/io/BufferedWri..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/concurrent/TimeUnit.sleep (2 samples, 25.00%)</title><rect x="747.5" y="243.0" width="295.0" height="15" fill="#3acf3a" rx="2" ry="2"/>
<text x="750.5" y="254.0">java/util/concurrent/TimeUnit.sleep</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Thread.sleep (2 samples, 25.00%)</title><rect x="747.5" y="227.0" width="295.0" height="15" fill="#6afc6a" rx="2" ry="2"/>
<text x="750.5" y="238.0">java/lang/Thread.sleep</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Thread.sleep (2 samples, 25.00%)</title><rect x="747.5" y="211.0" width="295.0" height="15" fill="#4ade4a" rx="2" ry="2"/>
<text x="750.5" y="222.0">java/lang/Thread.sleep</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>JVM_Sleep (2 samples, 25.00%)</title><rect x="747.5" y="195.0" width="295.0" height="15" fill="#cf3c3c" rx="2" ry="2"/>
<text x="750.5" y="206.0">JVM_Sleep</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>os::sleep(Thread*, long, bool) (2 samples, 25.00%)</title><rect x="747.5" y="179.0" width="295.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="750.5" y="190.0">os::sleep(Thread*, long, bool)</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>os::PlatformEvent::park(long) (2 samples, 25.00%)</title><rect x="747.5" y="163.0" width="295.0" height="15" fill="#b4b433" rx="2" ry="2"/>
<text x="750.5" y="174.0">os::PlatformEvent::park(long)</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__psynch_cvwait (2 samples, 25.00%)</title><rect x="747.5" y="147.0" width="295.0" height="15" fill="#d03e3e" rx="2" ry="2"/>
<text x="750.5" y="158.0">__psynch_cvwait</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>thread_start (1 samples, 12.50%)</title><rect x="1042.5" y="275.0" width="147.5" height="15" fill="#cb3737" rx="2" ry="2"/>
<text x="1045.5" y="286.0">thread_start</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_pthread_body (1 samples, 12.50%)</title><rect x="1042.5" y="259.0" width="147.5" height="15" fill="#dc4f4f" rx="2" ry="2"/>
<text x="1045.5" y="270.0">_pthread_body</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_pthread_body (1 samples, 12.50%)</title><rect x="1042.5" y="243.0" width="147.5" height="15" fill="#d54646" rx="2" ry="2"/>
<text x="1045.5" y="254.0">_pthread_body</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java_start(Thread*) (1 samples, 12.50%)</title><rect x="1042.5" y="227.0" width="147.5" height="15" fill="#cf3c3c" rx="2" ry="2"/>
<text x="1045.5" y="238.0">java_start(Thread*)</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>JavaThread::run() (1 samples, 12.50%)</title><rect x="1042.5" y="211.0" width="147.5" height="15" fill="#dada41" rx="2" ry="2"/>
<text x="1045.5" y="222.0">JavaThread::run()</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>JavaThread::thread_main_inner() (1 samples, 12.50%)</title><rect x="1042.5" y="195.0" width="147.5" height="15" fill="#c8c83b" rx="2" ry="2"/>
<text x="1045.5" y="206.0">JavaThread::thread_..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 12.50%)</title><rect x="1042.5" y="179.0" width="147.5" height="15" fill="#db4d4d" rx="2" ry="2"/>
<text x="1045.5" y="190.0">attach_listener_thr..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 12.50%)</title><rect x="1042.5" y="163.0" width="147.5" height="15" fill="#c7c73b" rx="2" ry="2"/>
<text x="1045.5" y="174.0">JvmtiExport::load_a..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>os::dll_load(char const*, char*, int) (1 samples, 12.50%)</title><rect x="1042.5" y="147.0" width="147.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.5" y="158.0">os::dll_load(char c..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_dispatch_queue_attr_concurrent (1 samples, 12.50%)</title><rect x="1042.5" y="131.0" width="147.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1045.5" y="142.0">_dispatch_queue_att..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>[unknown] (1 samples, 12.50%)</title><rect x="1042.5" y="115.0" width="147.5" height="15" fill="#eb6666" rx="2" ry="2"/>
<text x="1045.5" y="126.0">[unknown]</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>[unknown] (1 samples, 12.50%)</title><rect x="1042.5" y="99.0" width="147.5" height="15" fill="#d34343" rx="2" ry="2"/>
<text x="1045.5" y="110.0">[unknown]</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>[unknown] (1 samples, 12.50%)</title><rect x="1042.5" y="83.0" width="147.5" height="15" fill="#ed6868" rx="2" ry="2"/>
<text x="1045.5" y="94.0">[unknown]</text>
</g>
</svg>
