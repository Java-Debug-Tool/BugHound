diff --git a/bin/wrk_auto_benchmark.sh b/bin/wrk_auto_benchmark.sh
index 61e4444..f4f2f7d 100755
--- a/bin/wrk_auto_benchmark.sh
+++ b/bin/wrk_auto_benchmark.sh
@@ -52,6 +52,14 @@ STEP_INC_CLIENTS=100
 STEP_DURATION=60s
 
 #
+# warm up clients
+WARM_UP_CLIENTS=50
+
+#
+# warm up times
+WARM_UP_SECS=30s
+
+#
 # the base url to send the command
 BASE_URL=/java-debug-tool/shell/http/
 
@@ -67,6 +75,16 @@ WRK_COMMAND=~/benchmark/wrk/./wrk
 # the benchmark output
 WORK_FILE_NAME=benchmark.txt
 
+function info() {
+    time=$(date "+%Y-%m-%d %H:%M:%S")
+    echo -e "\033[32m${time} [INFO] $1 \033[0m"
+}
+
+function error() {
+    time=$(date "+%Y-%m-%d %H:%M:%S")
+    echo -e "\033[31m${time} [ERROR] $1 \033[0m"
+}
+
 #
 #  the usage
 #
@@ -85,6 +103,8 @@ function usage() {
          -d, duration [an number with unit (s -> seconds| m -> minutes) ref: wrk] step duration;
          -w, wrk-command [the wrk path] the path to the wrk command
          -u, help  print the usage
+         -m, warm up clients, default is 10
+         -e, [an number with unit (s -> seconds| m -> minutes) ref: wrk] warm up times, default is 30s
          -f, file [the file name] the output file name
    "
    exit 10
@@ -94,7 +114,7 @@ function usage() {
 # this function will kill http-server before exit shell
 #
 function killSelf() {
-    jps | grep "JavaDebugHttpServerLauncher" | awk '{print $1}' | xargs kill -9
+    lsof -i:${HTTP_SERVER_LISTEN_PORT} | grep "LISTEN" |  awk '{print $2}' | xargs kill -9
 }
 
 #
@@ -143,6 +163,11 @@ function benchmark() {
     benchmark_url="http://127.0.0.1:${HTTP_SERVER_LISTEN_PORT}${BASE_URL}?command=ct%20-o%20csv"
     echo "the benchmark data info url is : ${benchmark_url}"
 
+    # warm up
+    error "try to warm-up target jvm with connection: ${WARM_UP_CLIENTS} , hold on ${WARM_UP_SECS}"
+    ${WRK_COMMAND} -t1 -c${WARM_UP_CLIENTS} -L -d${WARM_UP_SECS} ${BENCHMARK_URL}
+    error "warm-up target jvm done, start to do benchmark now"
+
     echo "" > ${WORK_FILE_NAME}
     local seq=0
     clients=${INIT_CLIENTS}
@@ -152,18 +177,21 @@ function benchmark() {
        echo "this round will use ${clients} clients, hold ${STEP_DURATION}"
 
        ${WRK_COMMAND} -t1 -c${clients} -L -d${STEP_DURATION} ${BENCHMARK_URL} >> ${WORK_FILE_NAME} &
-       echo "sleep 20 seconds"
+       error  "sleep 20 seconds"
        sleep 20
 
        seq=`expr ${seq} + 1`
        url="${benchmark_url}&seq=${seq}"
-       echo "whole benchmark url : ${url}"
+       error "whole benchmark url : ${url}, try to get the profile data"
        curl ${url} >> ${WORK_FILE_NAME} &
        sleep 40
     done
 
     echo "benchmark done, please check the ${WORK_FILE_NAME} file to get the benchmark info"
 
+    # wait the file is write done ~
+    sleep 10
+
     # parse the benchmark result, and print out to console
     parse_benchmark_result ${WORK_FILE_NAME}
 
@@ -172,16 +200,6 @@ function benchmark() {
 
 }
 
-function info() {
-    time=$(date "+%Y-%m-%d %H:%M:%S")
-    echo -e "\033[32m${time} [INFO] $1 \033[0m"
-}
-
-function error() {
-    time=$(date "+%Y-%m-%d %H:%M:%S")
-    echo -e "\033[31m${time} [ERROR] $1 \033[0m"
-}
-
 #
 # this function will check your args, if any arg is invalid, this program will die;
 #
@@ -272,6 +290,8 @@ cat <<EOF
     Wrk Command                 : ${WRK_COMMAND}
     Output file                 : ${WORK_FILE_NAME}
     Target Benchmark URL        : ${BENCHMARK_URL}
+    Warm-up Clients             : ${WARM_UP_CLIENTS}
+    Warm-up Times               : ${WARM_UP_SECS}
 EOF
 }
 
@@ -282,6 +302,12 @@ EOF
 
 while getopts "b:i:p:h:c:t:s:d:w:f:u" opt; do
   case ${opt} in
+    m)
+      WARM_UP_CLIENTS=$OPTARG
+      ;;
+    e)
+      WARM_UP_SECS=$OPTARG
+      ;;
     i)
       REMOTE_IP=$OPTARG
       ;;
diff --git a/core/pom.xml b/core/pom.xml
index d569381..ab8d105 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -17,11 +17,52 @@
     <properties>
         <jdk.version>1.8</jdk.version>
         <asm.version>2.0</asm.version>
-
+        <slf4j.version>1.7.21</slf4j.version>
+        <log4j2.version>2.7</log4j2.version>
     </properties>
 
     <dependencies>
 
+
+        <!-- slf4j -->
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-api</artifactId>
+            <version>${slf4j.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>log4j-over-slf4j</artifactId>
+            <version>${slf4j.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>jcl-over-slf4j</artifactId>
+            <version>${slf4j.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>jul-to-slf4j</artifactId>
+            <version>${slf4j.version}</version>
+        </dependency>
+
+        <!-- log4j2 -->
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-api</artifactId>
+            <version>${log4j2.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-core</artifactId>
+            <version>${log4j2.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-slf4j-impl</artifactId>
+            <version>${log4j2.version}</version>
+        </dependency>
+
         <dependency>
             <groupId>net.java.dev.jna</groupId>
             <artifactId>jna</artifactId>
diff --git a/core/src/main/java/io/javadebug/core/ObjectUtils.java b/core/src/main/java/io/javadebug/core/ObjectUtils.java
index 13f8ce8..38ad94c 100644
--- a/core/src/main/java/io/javadebug/core/ObjectUtils.java
+++ b/core/src/main/java/io/javadebug/core/ObjectUtils.java
@@ -36,7 +36,6 @@
 
 package io.javadebug.core;
 
-import java.io.Serializable;
 import java.lang.reflect.Method;
 import java.util.Arrays;
 import java.util.HashSet;
@@ -46,7 +45,10 @@ import java.util.function.Predicate;
 public class ObjectUtils {
 
     // whether print object as json
-    public static boolean objectToJson = false;
+    public static volatile boolean objectToJson = true;
+
+    // whether force print object as json
+    public static volatile boolean forceToJson = true;
 
     /**
      *
@@ -75,6 +77,19 @@ public class ObjectUtils {
      * @return
      */
     public static String printObjectToString(Object obj) {
+
+        // check force tag
+        if (forceToJson) {
+            try {
+                return JacksonUtils.serialize(obj);
+            } catch (Exception e) {
+                // ignore, fallback
+                PSLogger.error("error while call JacksonUtils.serialize with error: " +UTILS.getErrorMsg(e));
+                return obj.toString();
+            }
+        }
+
+
         // 如果是null，则直接返回'NULL'
         if (obj == null) {
             return "NULL";
@@ -114,11 +129,11 @@ public class ObjectUtils {
      * @param obj
      */
     private static void printObjectToJson(Object obj, StringBuilder result) {
-        if (!objectToJson) {
+        if (!objectToJson && !forceToJson) {
             result.append(obj.toString());
             return;
         }
-        if ((obj instanceof Serializable) || obj.getClass().getName().startsWith("java.")
+        if (/*(obj instanceof Serializable) ||*/ obj.getClass().getName().startsWith("java.")
                 || obj.getClass().getName().startsWith("sun.")) {
             result.append(obj.toString());
             return;
diff --git a/core/src/main/java/io/javadebug/core/OptionController.java b/core/src/main/java/io/javadebug/core/OptionController.java
index 734db1e..cf9f22b 100644
--- a/core/src/main/java/io/javadebug/core/OptionController.java
+++ b/core/src/main/java/io/javadebug/core/OptionController.java
@@ -61,6 +61,14 @@ public class OptionController {
         PSLogger.configureError(true);
     }
 
+    public static void onForcePrintObjectToJson() {
+        ObjectUtils.forceToJson = true;
+    }
+
+    public static void offForcePrintObjectToJson() {
+        ObjectUtils.forceToJson = false;
+    }
+
     public static void onPrintObjectToJson() {
         ObjectUtils.objectToJson = true;
     }
diff --git a/core/src/main/java/io/javadebug/core/PSLogger.java b/core/src/main/java/io/javadebug/core/PSLogger.java
index a4424ee..5070e5d 100644
--- a/core/src/main/java/io/javadebug/core/PSLogger.java
+++ b/core/src/main/java/io/javadebug/core/PSLogger.java
@@ -36,6 +36,9 @@
 
 package io.javadebug.core;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import java.io.PrintStream;
 import java.util.Date;
 
@@ -46,11 +49,13 @@ import java.util.Date;
  */
 public class PSLogger {
 
+    private static final Logger LOGGER = LoggerFactory.getLogger(PSLogger.class.getName());
+
     private static final PrintStream eps = System.err;
     private static final PrintStream ops = System.out;
 
     private static volatile boolean allowInfo = false;
-    private static volatile boolean allowErr = true;
+    private static volatile boolean allowErr = false;
 
     public static void configureInfo(boolean f) {
         allowInfo = f;
@@ -62,14 +67,17 @@ public class PSLogger {
 
     public static void info(String msg) {
         if (allowInfo) {
-            ops.println(String.format("[info][%s] %s", new Date(), msg));
+            ops.println(String.format("[info] [%s] [%s] %s", new Date(), Thread.currentThread().getName(), msg));
         }
+        LOGGER.info(msg);
     }
 
     public static void error(String msg) {
         if (allowErr) {
-            eps.println(String.format("[error][%s] %s", new Date(), msg));
+            eps.println(String.format("[error] [%s] [%s] %s", new Date(), Thread.currentThread().getName(), msg));
         }
+
+        LOGGER.error(msg);
     }
 
 }
diff --git a/core/src/main/java/io/javadebug/core/annotation/CommandDescribeUtil.java b/core/src/main/java/io/javadebug/core/annotation/CommandDescribeUtil.java
index ca8f531..802bb82 100644
--- a/core/src/main/java/io/javadebug/core/annotation/CommandDescribeUtil.java
+++ b/core/src/main/java/io/javadebug/core/annotation/CommandDescribeUtil.java
@@ -60,22 +60,22 @@ public class CommandDescribeUtil {
     public static String collectFromCommand(Class<Command> commandClass) {
         CommandDescribe commandDescribe = commandClass.getAnnotation(CommandDescribe.class);
         if (commandDescribe == null) {
-            return "暂时没有命令相关信息";
+            return "Command Not Find !";
         }
         StringBuilder sb = new StringBuilder();
 
         // name
-        sb.append("命令名称    \t: ").append(commandDescribe.name());
+        sb.append("Command    \t: ").append(commandDescribe.name());
         sb.append(" | ").append(commandDescribe.simpleName()).append("\n");
 
         // function
-        sb.append("命令功能    \t: ").append(commandDescribe.function()).append("\n");
+        sb.append("Function   \t: ").append(commandDescribe.function()).append("\n");
 
         // usage
-        sb.append("命令使用方法 \t: ").append(commandDescribe.usage()).append("\n");
+        sb.append("Usage      \t: ").append(commandDescribe.usage()).append("\n");
 
         // type
-        sb.append("命令类型    \t: ").append(commandDescribe.cmdType().name()).append("\n");
+        sb.append("Type       \t: ").append(commandDescribe.cmdType().name()).append("\n");
 
         return sb.toString();
     }
diff --git a/core/src/main/java/io/javadebug/core/command/MethodTraceCommand.java b/core/src/main/java/io/javadebug/core/command/MethodTraceCommand.java
index 7d8c1b4..017ad5b 100644
--- a/core/src/main/java/io/javadebug/core/command/MethodTraceCommand.java
+++ b/core/src/main/java/io/javadebug/core/command/MethodTraceCommand.java
@@ -453,7 +453,7 @@ public class MethodTraceCommand implements Command {
         }
 
         // the new result.
-        return MethodTraceConverter.toLineWithVarCostTrace(methodTraceCommandList, null, false, isField);
+        return MethodTraceConverter.toLineWithVarCostTrace(methodTraceCommandList, null, true, isField);
     }
 
     /**
diff --git a/core/src/main/java/io/javadebug/core/command/OptionCommand.java b/core/src/main/java/io/javadebug/core/command/OptionCommand.java
index 8a408d8..791b06d 100644
--- a/core/src/main/java/io/javadebug/core/command/OptionCommand.java
+++ b/core/src/main/java/io/javadebug/core/command/OptionCommand.java
@@ -61,8 +61,9 @@ import java.util.function.Function;
         simpleName = "set",
         function = "用于动态进行agent配置",
         usage = "option|set -p [option name] -o [option operator]\n" +
-                        "       \t dump                 \t: control whether dump class file after enhancing class.\n" +
+                        "       \t dump                 \t: control whether dump class file after enhancing class [on | off]\n" +
                         "       \t ojson                \t: control the object print, toJson when the object is non-toString [on | off]\n" +
+                        "       \t fjson                \t: control force print object to json [on | off] \n" +
                         "       \t log-info             \t: control the info log [on | off]\n" +
                         "       \t log-error            \t: control the error log [on | off]\n" +
                         "       \t close-while-no-con   \t: control the server shut down while no connections [on | off]\n",
@@ -136,6 +137,20 @@ public class OptionCommand implements Command {
             }
         });
 
+        OPTION_MAP.put("fjson", new Function<String, Boolean>() {
+            @Override
+            public Boolean apply(String s) {
+                if ("on".equals(s)) {
+                    OptionController.onForcePrintObjectToJson();
+                } else if ("off".equals(s)) {
+                    OptionController.offForcePrintObjectToJson();
+                } else {
+                    return false;
+                }
+                return true;
+            }
+        });
+
         OPTION_MAP.put("dump", new Function<String, Boolean>() {
             @Override
             public Boolean apply(String s) {
diff --git a/core/src/main/java/io/javadebug/core/enhance/ClassMethodWeaveConfig.java b/core/src/main/java/io/javadebug/core/enhance/ClassMethodWeaveConfig.java
index d5cfe18..4be00cf 100644
--- a/core/src/main/java/io/javadebug/core/enhance/ClassMethodWeaveConfig.java
+++ b/core/src/main/java/io/javadebug/core/enhance/ClassMethodWeaveConfig.java
@@ -23,7 +23,7 @@ package io.javadebug.core.enhance;
 
 public class ClassMethodWeaveConfig {
     private boolean args = true, ret = true, e = true, line = true,
-            var = true, field = false, fieldDiff = false, sfield = false, sfd = false;
+            var = true, field = false, fieldDiff = false, sfield = false, sfd = false, stack = false;
 
     public boolean isArgs() {
         return args;
@@ -121,4 +121,12 @@ public class ClassMethodWeaveConfig {
     public void setSfd(boolean sfd) {
         this.sfd = sfd;
     }
+
+    public boolean isStack() {
+        return stack;
+    }
+
+    public void setStack(boolean stack) {
+        this.stack = stack;
+    }
 }
diff --git a/core/src/main/java/io/javadebug/core/enhance/ClassMethodWeaver.java b/core/src/main/java/io/javadebug/core/enhance/ClassMethodWeaver.java
index c90076e..b850fee 100644
--- a/core/src/main/java/io/javadebug/core/enhance/ClassMethodWeaver.java
+++ b/core/src/main/java/io/javadebug/core/enhance/ClassMethodWeaver.java
@@ -83,7 +83,10 @@ import static io.javadebug.core.Constant.DUMP_OBJECT_OPTIONS;
 public class ClassMethodWeaver extends ClassVisitor implements Opcodes {
 
     // the debug mode
-    public static boolean debug = false;
+    public static volatile boolean debug = false;
+
+    // the stack deep limit
+    public static int callStackDeepLimit = 10;
 
     // client weave config
     private static final Map<String, ClassMethodWeaveConfig> CLIENT_WEAVE_CONFIG_MAP = new HashMap<>();
@@ -179,11 +182,30 @@ public class ClassMethodWeaver extends ClassVisitor implements Opcodes {
     }
 
     /**
+     *  register an advice with config
+     *
+     * @param cid the clinet id
+     * @param methodInvokeAdvice the method invoke advice instance {@link MethodInvokeAdvice}
+     * @param classMethodWeaveConfig  the weave config {@link ClassMethodWeaveConfig}
+     */
+    public static void regAdvice(int cid, MethodInvokeAdvice methodInvokeAdvice,
+                                 ClassMethodWeaveConfig classMethodWeaveConfig) {
+        regAdvice(cid, methodInvokeAdvice);
+
+        // add one
+        CLASS_WEAVE_CONFIG_MAP.put(cid, classMethodWeaveConfig);
+    }
+
+    /**
      *  一个client同一时间只能注册一个advice，完成观察之后需要来删除advice
      *
      * @param cid client id
      */
     public static MethodInvokeAdvice unRegAdvice(int cid) {
+
+        // unReg config
+        CLASS_WEAVE_CONFIG_MAP.remove(cid);
+
         return METHOD_INVOKE_ADVICE_CONCURRENT_MAP.remove(cid);
     }
 
@@ -599,6 +621,7 @@ public class ClassMethodWeaver extends ClassVisitor implements Opcodes {
                     }
                     threadLocalParamMap.put("localTable", localVariableTable);
 
+                    // todo : check whether the caller need the call stack, if not, do not do this
                     // get the call trace
                     String callTraceStack = callTrace(className, methodName);
                     threadLocalParamMap.put("callTrace", callTraceStack);
@@ -852,6 +875,7 @@ public class ClassMethodWeaver extends ClassVisitor implements Opcodes {
         int space = 1;
 
         boolean find = false;
+        int deep = 0;
         for (StackTraceElement element : traceElements) {
             if (!find) {
                 if (tc.equals(element.getClassName()) && tm.equals(element.getMethodName())) {
@@ -871,6 +895,11 @@ public class ClassMethodWeaver extends ClassVisitor implements Opcodes {
             } else {
                 sb.append(" at line:").append(element.getLineNumber()).append("\n");
             }
+
+            // check
+            if (++ deep >= callStackDeepLimit) {
+                break;
+            }
         }
 
         return sb.toString();
diff --git a/core/src/main/java/io/javadebug/core/enhance/MethodTraceConverter.java b/core/src/main/java/io/javadebug/core/enhance/MethodTraceConverter.java
index 5046135..de2f8e5 100644
--- a/core/src/main/java/io/javadebug/core/enhance/MethodTraceConverter.java
+++ b/core/src/main/java/io/javadebug/core/enhance/MethodTraceConverter.java
@@ -249,7 +249,7 @@ public class MethodTraceConverter {
         String caller = frame.getCaller();
 
         sb.append("[").append(frame.getClassName())
-                .append(".").append(frame.getMethodName()).append("] by invoking:").append(caller)
+                .append(".").append(frame.getMethodName()).append("] invoke by Thread:").append(caller)
                 .append("\nwith params\n")
                 .append(printObjectArray(frame.getParams())).append("\n");
 
diff --git a/core/src/main/java/io/javadebug/core/enhance/MethodTraceEnhance.java b/core/src/main/java/io/javadebug/core/enhance/MethodTraceEnhance.java
index 56d1bd3..4754896 100644
--- a/core/src/main/java/io/javadebug/core/enhance/MethodTraceEnhance.java
+++ b/core/src/main/java/io/javadebug/core/enhance/MethodTraceEnhance.java
@@ -68,7 +68,7 @@ public class MethodTraceEnhance implements CommonClassFileTransformer {
     private static MethodTraceEnhance methodTraceEnhance;
 
     // debug tag
-    public static boolean _dump_class_to_debug_tag = true;
+    public static volatile boolean _dump_class_to_debug_tag = true;
 
     // the client
     private int contextId;
diff --git a/core/src/main/java/io/javadebug/core/transport/NettyTransportClient.java b/core/src/main/java/io/javadebug/core/transport/NettyTransportClient.java
index abcfc76..6c04cb8 100644
--- a/core/src/main/java/io/javadebug/core/transport/NettyTransportClient.java
+++ b/core/src/main/java/io/javadebug/core/transport/NettyTransportClient.java
@@ -41,10 +41,17 @@ import io.javadebug.core.CommandSink;
 import io.javadebug.core.CommandSource;
 import io.javadebug.core.log.PSLogger;
 import io.javadebug.core.utils.UTILS;
+import io.javadebug.core.exception.CommandExecuteWithStageException;
 import io.javadebug.core.handler.ClientCommandRequestHandler;
 import io.javadebug.core.handler.ClientHandler;
 import io.javadebug.core.handler.ConsoleCommandSource;
 import io.javadebug.core.handler.ServerIdleHandler;
+import io.javadebug.core.hook.HookOperator;
+import io.javadebug.core.hook.JavaDebugToolRuntimeHook;
+import io.javadebug.core.hook.OnCommandInputHookImpl;
+import io.javadebug.core.hook.OnCommandToUIHookImpl;
+import io.javadebug.core.hook.OnErrorHookImpl;
+import io.javadebug.core.hook.RuntimeStage;
 import io.javadebug.core.ui.SimplePSUI;
 import io.javadebug.core.ui.UI;
 import io.netty.bootstrap.Bootstrap;
@@ -80,8 +87,8 @@ import java.util.concurrent.TimeUnit;
  * Created on 2019/4/20 12:44.
  *
  *   特此说明：本类仅作为附属类随从java-debug发布，仅作为一个命令行客户端提供命令处理
- *   展示界面，并且仅能连接到一台jvm上，无法同时向多个局面发送命令，如果有需要，或者无论
- *   任何时候，你都应该尽量使用 {@link NettyTransportClusterClient}来作为你的客户端
+ *   展示界面，并且仅能连接到一台jvm上，无法同时向多个局面发送命令，如果有需要，
+ *   你可以使用 {@link NettyTransportClusterClient} 来作为你的客户端
  *   实现，这个客户端提供了可扩展的接口，包括Source和Sink等，方便外部系统来对接
  *
  * @author <a href="H.J"> HuJian </a>
@@ -260,6 +267,15 @@ public class NettyTransportClient {
      */
     public void init() {
 
+        // register the default hook here [command input]
+        JavaDebugToolRuntimeHook.Register.onCommandInput(new OnCommandInputHookImpl());
+
+        // register the default hook here [command to ui]
+        JavaDebugToolRuntimeHook.Register.onCommandToUI(new OnCommandToUIHookImpl());
+
+        // register the default hook here [error]
+        JavaDebugToolRuntimeHook.Register.onExecuteError(new OnErrorHookImpl());
+
         EventLoopGroup group = new NioEventLoopGroup(1, new ThreadFactory() {
             @Override
             public Thread newThread(Runnable r) {
@@ -381,6 +397,10 @@ public class NettyTransportClient {
                     channel.writeAndFlush(remoteCommand).addListener(new ChannelFutureListener() {
                         @Override
                         public void operationComplete(ChannelFuture future) throws Exception {
+
+                            // notice
+                            JavaDebugToolRuntimeHook.Notice.onCommandSend(remoteCommand, RuntimeStage.DEBUG_COMMAND_SENT);
+
                             if (future.isSuccess()) {
                                 //PSLogger.info("成功发送一个命令到服务端");
                             } else {
@@ -388,6 +408,7 @@ public class NettyTransportClient {
                                     future.get();
                                 } catch (Exception e) {
                                     PSLogger.error("命令发送失败:" + e);
+                                    JavaDebugToolRuntimeHook.Notice.onExecuteError(new CommandExecuteWithStageException(e, RuntimeStage.DEBUG_COMMAND_SENT), RuntimeStage.ERROR);
                                 }
                             }
                             countDownLatch.countDown();
@@ -466,15 +487,23 @@ public class NettyTransportClient {
                 continue;
             }
 
+            // NOTICE
+            JavaDebugToolRuntimeHook.Notice.onCommandInput(line, RuntimeStage.COMMAND_INPUT);
+
             RemoteCommand remoteCommand = getRemoteCommand();
 
             remoteCommand.clearShit();
 
             try {
                 remoteCommand = commandRequestHandler.onCreateRequest(line, remoteCommand);
+
+                // NOTICE
+                JavaDebugToolRuntimeHook.Notice.onCommandCreate(remoteCommand, RuntimeStage.GENERATE_COMMAND_PROTOCOL);
+
             } catch (Exception e) {
                 print("输入处理异常：" + e, os);
                 noticeSink("输入处理异常：" + e);
+                JavaDebugToolRuntimeHook.Notice.onExecuteError(new CommandExecuteWithStageException("input handler error", e, RuntimeStage.GENERATE_COMMAND_PROTOCOL), RuntimeStage.ERROR);
                 continue;
             }
             if (remoteCommand == null) {
@@ -489,8 +518,17 @@ public class NettyTransportClient {
                 // block to get the receive from server
                 RemoteCommand resp = RECEIVE_MQ.take();
 
+                // notice
+                JavaDebugToolRuntimeHook.Notice.onCommendResp(remoteCommand, RuntimeStage.DEBUG_COMMAND_RESP);
+
+                // show string
+                String show = ui.toUI(resp);
+
+                // notice
+                JavaDebugToolRuntimeHook.Notice.onCommandToUI(show, RuntimeStage.DEBUG_COMMAND_SHOW);
+
                 /// 对结果进行处理
-                print(ui.toUI(resp), os);
+                print(show, os);
 
                 // sink
                 for (CommandSink sink : commandSinkSet) {
diff --git a/debug-dump-dir/R.class b/debug-dump-dir/R.class
index 38be669..4f0c789 100644
Binary files a/debug-dump-dir/R.class and b/debug-dump-dir/R.class differ
diff --git a/java-debug-tool.zip b/java-debug-tool.zip
index fee036a..4fc5fda 100644
Binary files a/java-debug-tool.zip and b/java-debug-tool.zip differ
diff --git a/script/wrk_auto_benchmark.sh b/script/wrk_auto_benchmark.sh
index 61e4444..f4f2f7d 100755
--- a/script/wrk_auto_benchmark.sh
+++ b/script/wrk_auto_benchmark.sh
@@ -52,6 +52,14 @@ STEP_INC_CLIENTS=100
 STEP_DURATION=60s
 
 #
+# warm up clients
+WARM_UP_CLIENTS=50
+
+#
+# warm up times
+WARM_UP_SECS=30s
+
+#
 # the base url to send the command
 BASE_URL=/java-debug-tool/shell/http/
 
@@ -67,6 +75,16 @@ WRK_COMMAND=~/benchmark/wrk/./wrk
 # the benchmark output
 WORK_FILE_NAME=benchmark.txt
 
+function info() {
+    time=$(date "+%Y-%m-%d %H:%M:%S")
+    echo -e "\033[32m${time} [INFO] $1 \033[0m"
+}
+
+function error() {
+    time=$(date "+%Y-%m-%d %H:%M:%S")
+    echo -e "\033[31m${time} [ERROR] $1 \033[0m"
+}
+
 #
 #  the usage
 #
@@ -85,6 +103,8 @@ function usage() {
          -d, duration [an number with unit (s -> seconds| m -> minutes) ref: wrk] step duration;
          -w, wrk-command [the wrk path] the path to the wrk command
          -u, help  print the usage
+         -m, warm up clients, default is 10
+         -e, [an number with unit (s -> seconds| m -> minutes) ref: wrk] warm up times, default is 30s
          -f, file [the file name] the output file name
    "
    exit 10
@@ -94,7 +114,7 @@ function usage() {
 # this function will kill http-server before exit shell
 #
 function killSelf() {
-    jps | grep "JavaDebugHttpServerLauncher" | awk '{print $1}' | xargs kill -9
+    lsof -i:${HTTP_SERVER_LISTEN_PORT} | grep "LISTEN" |  awk '{print $2}' | xargs kill -9
 }
 
 #
@@ -143,6 +163,11 @@ function benchmark() {
     benchmark_url="http://127.0.0.1:${HTTP_SERVER_LISTEN_PORT}${BASE_URL}?command=ct%20-o%20csv"
     echo "the benchmark data info url is : ${benchmark_url}"
 
+    # warm up
+    error "try to warm-up target jvm with connection: ${WARM_UP_CLIENTS} , hold on ${WARM_UP_SECS}"
+    ${WRK_COMMAND} -t1 -c${WARM_UP_CLIENTS} -L -d${WARM_UP_SECS} ${BENCHMARK_URL}
+    error "warm-up target jvm done, start to do benchmark now"
+
     echo "" > ${WORK_FILE_NAME}
     local seq=0
     clients=${INIT_CLIENTS}
@@ -152,18 +177,21 @@ function benchmark() {
        echo "this round will use ${clients} clients, hold ${STEP_DURATION}"
 
        ${WRK_COMMAND} -t1 -c${clients} -L -d${STEP_DURATION} ${BENCHMARK_URL} >> ${WORK_FILE_NAME} &
-       echo "sleep 20 seconds"
+       error  "sleep 20 seconds"
        sleep 20
 
        seq=`expr ${seq} + 1`
        url="${benchmark_url}&seq=${seq}"
-       echo "whole benchmark url : ${url}"
+       error "whole benchmark url : ${url}, try to get the profile data"
        curl ${url} >> ${WORK_FILE_NAME} &
        sleep 40
     done
 
     echo "benchmark done, please check the ${WORK_FILE_NAME} file to get the benchmark info"
 
+    # wait the file is write done ~
+    sleep 10
+
     # parse the benchmark result, and print out to console
     parse_benchmark_result ${WORK_FILE_NAME}
 
@@ -172,16 +200,6 @@ function benchmark() {
 
 }
 
-function info() {
-    time=$(date "+%Y-%m-%d %H:%M:%S")
-    echo -e "\033[32m${time} [INFO] $1 \033[0m"
-}
-
-function error() {
-    time=$(date "+%Y-%m-%d %H:%M:%S")
-    echo -e "\033[31m${time} [ERROR] $1 \033[0m"
-}
-
 #
 # this function will check your args, if any arg is invalid, this program will die;
 #
@@ -272,6 +290,8 @@ cat <<EOF
     Wrk Command                 : ${WRK_COMMAND}
     Output file                 : ${WORK_FILE_NAME}
     Target Benchmark URL        : ${BENCHMARK_URL}
+    Warm-up Clients             : ${WARM_UP_CLIENTS}
+    Warm-up Times               : ${WARM_UP_SECS}
 EOF
 }
 
@@ -282,6 +302,12 @@ EOF
 
 while getopts "b:i:p:h:c:t:s:d:w:f:u" opt; do
   case ${opt} in
+    m)
+      WARM_UP_CLIENTS=$OPTARG
+      ;;
+    e)
+      WARM_UP_SECS=$OPTARG
+      ;;
     i)
       REMOTE_IP=$OPTARG
       ;;
diff --git a/spring/lib/bin/wrk_auto_benchmark.sh b/spring/lib/bin/wrk_auto_benchmark.sh
index 61e4444..f4f2f7d 100755
--- a/spring/lib/bin/wrk_auto_benchmark.sh
+++ b/spring/lib/bin/wrk_auto_benchmark.sh
@@ -52,6 +52,14 @@ STEP_INC_CLIENTS=100
 STEP_DURATION=60s
 
 #
+# warm up clients
+WARM_UP_CLIENTS=50
+
+#
+# warm up times
+WARM_UP_SECS=30s
+
+#
 # the base url to send the command
 BASE_URL=/java-debug-tool/shell/http/
 
@@ -67,6 +75,16 @@ WRK_COMMAND=~/benchmark/wrk/./wrk
 # the benchmark output
 WORK_FILE_NAME=benchmark.txt
 
+function info() {
+    time=$(date "+%Y-%m-%d %H:%M:%S")
+    echo -e "\033[32m${time} [INFO] $1 \033[0m"
+}
+
+function error() {
+    time=$(date "+%Y-%m-%d %H:%M:%S")
+    echo -e "\033[31m${time} [ERROR] $1 \033[0m"
+}
+
 #
 #  the usage
 #
@@ -85,6 +103,8 @@ function usage() {
          -d, duration [an number with unit (s -> seconds| m -> minutes) ref: wrk] step duration;
          -w, wrk-command [the wrk path] the path to the wrk command
          -u, help  print the usage
+         -m, warm up clients, default is 10
+         -e, [an number with unit (s -> seconds| m -> minutes) ref: wrk] warm up times, default is 30s
          -f, file [the file name] the output file name
    "
    exit 10
@@ -94,7 +114,7 @@ function usage() {
 # this function will kill http-server before exit shell
 #
 function killSelf() {
-    jps | grep "JavaDebugHttpServerLauncher" | awk '{print $1}' | xargs kill -9
+    lsof -i:${HTTP_SERVER_LISTEN_PORT} | grep "LISTEN" |  awk '{print $2}' | xargs kill -9
 }
 
 #
@@ -143,6 +163,11 @@ function benchmark() {
     benchmark_url="http://127.0.0.1:${HTTP_SERVER_LISTEN_PORT}${BASE_URL}?command=ct%20-o%20csv"
     echo "the benchmark data info url is : ${benchmark_url}"
 
+    # warm up
+    error "try to warm-up target jvm with connection: ${WARM_UP_CLIENTS} , hold on ${WARM_UP_SECS}"
+    ${WRK_COMMAND} -t1 -c${WARM_UP_CLIENTS} -L -d${WARM_UP_SECS} ${BENCHMARK_URL}
+    error "warm-up target jvm done, start to do benchmark now"
+
     echo "" > ${WORK_FILE_NAME}
     local seq=0
     clients=${INIT_CLIENTS}
@@ -152,18 +177,21 @@ function benchmark() {
        echo "this round will use ${clients} clients, hold ${STEP_DURATION}"
 
        ${WRK_COMMAND} -t1 -c${clients} -L -d${STEP_DURATION} ${BENCHMARK_URL} >> ${WORK_FILE_NAME} &
-       echo "sleep 20 seconds"
+       error  "sleep 20 seconds"
        sleep 20
 
        seq=`expr ${seq} + 1`
        url="${benchmark_url}&seq=${seq}"
-       echo "whole benchmark url : ${url}"
+       error "whole benchmark url : ${url}, try to get the profile data"
        curl ${url} >> ${WORK_FILE_NAME} &
        sleep 40
     done
 
     echo "benchmark done, please check the ${WORK_FILE_NAME} file to get the benchmark info"
 
+    # wait the file is write done ~
+    sleep 10
+
     # parse the benchmark result, and print out to console
     parse_benchmark_result ${WORK_FILE_NAME}
 
@@ -172,16 +200,6 @@ function benchmark() {
 
 }
 
-function info() {
-    time=$(date "+%Y-%m-%d %H:%M:%S")
-    echo -e "\033[32m${time} [INFO] $1 \033[0m"
-}
-
-function error() {
-    time=$(date "+%Y-%m-%d %H:%M:%S")
-    echo -e "\033[31m${time} [ERROR] $1 \033[0m"
-}
-
 #
 # this function will check your args, if any arg is invalid, this program will die;
 #
@@ -272,6 +290,8 @@ cat <<EOF
     Wrk Command                 : ${WRK_COMMAND}
     Output file                 : ${WORK_FILE_NAME}
     Target Benchmark URL        : ${BENCHMARK_URL}
+    Warm-up Clients             : ${WARM_UP_CLIENTS}
+    Warm-up Times               : ${WARM_UP_SECS}
 EOF
 }
 
@@ -282,6 +302,12 @@ EOF
 
 while getopts "b:i:p:h:c:t:s:d:w:f:u" opt; do
   case ${opt} in
+    m)
+      WARM_UP_CLIENTS=$OPTARG
+      ;;
+    e)
+      WARM_UP_SECS=$OPTARG
+      ;;
     i)
       REMOTE_IP=$OPTARG
       ;;
diff --git a/test/src/main/java/R.java b/test/src/main/java/R.java
index 35c2849..f7fa5b5 100644
--- a/test/src/main/java/R.java
+++ b/test/src/main/java/R.java
@@ -39,7 +39,30 @@ public class R {
 
     }
 
-    public int call(int i, int j, C c, int[] dd, List<Long> e, long[] ff, Long[] g) {
+    public static class MMM {
+//        @Override
+//        public String toString() {
+//            return "MMM{" +
+//                           "data='" + data + '\'' +
+//                           '}';
+//        }
+
+        private String data = "default";
+
+        public MMM(String data) {
+            this.data = data;
+        }
+
+        public String getData() {
+            return data;
+        }
+
+        public void setData(String data) {
+            this.data = data;
+        }
+    }
+
+    public int call(int i, int j, C c, int[] dd, List<Long> e, long[] ff, Long[] g, List<MMM> mmmList) {
 
         if (c.getA() < 0) {
             throw new NullPointerException("test claw");
@@ -110,7 +133,9 @@ public class R {
             public void run() {
                 while (true) {
                     try {
-                        System.out.println(r.call(random.nextInt(10), random.nextInt(10), new C(), null, null, null, null));
+                        List<MMM> mmms = new ArrayList<>();
+                        mmms.add(new MMM("test"));
+                        System.out.println(r.call(random.nextInt(10), random.nextInt(10), new C(), null, null, null, null, mmms));
                     } catch (Exception e) {
                         System.out.println(e.getMessage());
                     } finally {
